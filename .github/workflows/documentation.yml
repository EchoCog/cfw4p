name: Documentation & Links Check

on:
  push:
    branches: [ main ]
    paths: 
      - '**.md'
      - 'docs/**'
  pull_request:
    paths:
      - '**.md'
      - 'docs/**'
  schedule:
    # Run weekly to check for broken links
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  documentation-check:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Markdown files
        run: |
          echo "Checking Markdown files for common issues..."
          
          # Find all markdown files
          MARKDOWN_FILES=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*")
          
          echo "Found Markdown files:"
          echo "$MARKDOWN_FILES"
          
          # Basic markdown validation
          for file in $MARKDOWN_FILES; do
            echo "Checking $file..."
            
            # Check for proper headings structure
            if ! grep -q "^# " "$file"; then
              echo "⚠️ $file might be missing a main heading"
            fi
            
            # Check for empty files
            if [ ! -s "$file" ]; then
              echo "⚠️ $file is empty"
            fi
          done
          
          echo "✅ Markdown validation completed"

      - name: Check for broken internal links
        run: |
          echo "Checking for broken internal links..."
          
          # Find markdown files and check internal links
          find . -name "*.md" -not -path "./node_modules/*" -exec grep -l "\[.*\](" {} \; | while read file; do
            echo "Checking links in $file..."
            
            # Extract internal links (relative paths)
            grep -o '\[.*\]([^)]*\.md[^)]*)' "$file" | grep -o '([^)]*)' | tr -d '()' | while read link; do
              if [[ "$link" =~ ^[^/].*\.md$ ]] || [[ "$link" =~ ^\.\/.*\.md$ ]]; then
                # Check if file exists
                if [ ! -f "$link" ] && [ ! -f "./$link" ]; then
                  echo "❌ Broken internal link in $file: $link"
                fi
              fi
            done
          done
          
          echo "✅ Internal link check completed"

      - name: Generate documentation report
        run: |
          echo "📊 Documentation Report"
          echo "======================"
          
          TOTAL_MD_FILES=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          TOTAL_WORDS=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec wc -w {} + | tail -1 | awk '{print $1}')
          
          echo "📄 Total Markdown files: $TOTAL_MD_FILES"
          echo "📝 Total words: $TOTAL_WORDS"
          echo ""
          
          echo "📁 Documentation structure:"
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | sort
          
          echo ""
          echo "✅ Documentation report completed"

  link-checker:
    name: External Link Checker
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install link checker
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          npm install -g markdown-link-check

      - name: Check external links
        run: |
          echo "Checking external links in documentation..."
          
          # Find markdown files and check external links
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking external links in $file..."
            markdown-link-check "$file" --config .markdown-link-check.json || true
          done
        continue-on-error: true
        id: link_check

      - name: Create link check configuration
        run: |
          cat > .markdown-link-check.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              }
            ],
            "replacementPatterns": [],
            "httpHeaders": [
              {
                "urls": ["https://github.com"],
                "headers": {
                  "Accept": "text/html"
                }
              }
            ],
            "timeout": "20s",
            "retryOn429": true,
            "retryCount": 2,
            "fallbackRetryDelay": "30s",
            "aliveStatusCodes": [200, 206]
          }
          EOF

      - name: Report link issues
        if: steps.link_check.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '📚 Documentation Link Issues';
            const body = `
            ## Documentation Link Check Failed
            
            **External link validation found issues in documentation.**
            
            ### Actionable Steps:
            1. Review the link checker output in the workflow logs
            2. Fix or remove broken external links
            3. Update URLs that have moved or changed
            4. Consider using archived versions for permanently broken links
            5. Update the link check configuration if needed
            
            **Common Issues:**
            - URLs that have moved or been removed
            - Temporary network issues
            - Sites that block automated requests
            - Typos in URLs
            
            **Link Check Configuration:**
            - Timeout: 20 seconds
            - Retries: 2 attempts
            - Excludes localhost URLs
            
            **Triggered by:** ${{ github.event_name }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_id }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['documentation', 'broken-links', 'automated-issue']
            });

  documentation-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze documentation coverage
        run: |
          echo "📊 Analyzing documentation coverage..."
          
          # Check for essential documentation files
          ESSENTIAL_DOCS=(
            "README.md"
            "DEPLOYMENT_GUIDE.md"
            "TECHNICAL_DOCUMENTATION.md"
            ".github/README.md"
          )
          
          echo "✅ Essential documentation check:"
          for doc in "${ESSENTIAL_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "  ✅ $doc exists"
            else
              echo "  ❌ $doc missing"
            fi
          done
          
          # Check if code files have corresponding documentation
          echo ""
          echo "📁 Code documentation coverage:"
          
          # Check if TypeScript files in src/ have JSDoc comments
          TS_FILES_WITH_DOCS=$(find src/ -name "*.ts" -exec grep -l "/\*\*" {} \; 2>/dev/null | wc -l)
          TOTAL_TS_FILES=$(find src/ -name "*.ts" 2>/dev/null | wc -l)
          
          if [ $TOTAL_TS_FILES -gt 0 ]; then
            DOC_COVERAGE=$((TS_FILES_WITH_DOCS * 100 / TOTAL_TS_FILES))
            echo "  📝 TypeScript files with JSDoc: $TS_FILES_WITH_DOCS/$TOTAL_TS_FILES ($DOC_COVERAGE%)"
          else
            echo "  📝 No TypeScript files found in src/"
          fi
          
          # Check workflow documentation
          WORKFLOW_FILES=$(find .github/workflows/ -name "*.yml" | wc -l)
          echo "  🔧 GitHub Actions workflows: $WORKFLOW_FILES"
          
          echo ""
          echo "📋 Documentation quality metrics:"
          
          # Calculate documentation-to-code ratio
          CODE_LINES=$(find src/ -name "*.ts" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          DOC_LINES=$(find . -name "*.md" -not -path "./node_modules/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          
          if [ $CODE_LINES -gt 0 ]; then
            DOC_RATIO=$((DOC_LINES * 100 / CODE_LINES))
            echo "  📊 Documentation-to-code ratio: $DOC_LINES doc lines / $CODE_LINES code lines ($DOC_RATIO%)"
          fi
          
          echo ""
          echo "✅ Documentation coverage analysis completed"
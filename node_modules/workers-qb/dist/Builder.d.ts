import { Delete, Insert, Join, SelectAll, SelectOne, Update } from './interfaces';
import { ConflictTypes, FetchTypes, OrderTypes } from './enums';
import { Raw } from './tools';
export declare class QueryBuilder<GenericResult, GenericResultOne> {
    _debugger: boolean;
    setDebugger(state: boolean): void;
    execute(params: {
        query: string;
        arguments?: (string | number | boolean | null | Raw)[];
        fetchType?: FetchTypes;
    }): Promise<any>;
    createTable(params: {
        tableName: string;
        schema: string;
        ifNotExists?: boolean;
    }): Promise<GenericResult>;
    dropTable(params: {
        tableName: string;
        ifExists?: boolean;
    }): Promise<GenericResult>;
    fetchOne(params: SelectOne): Promise<GenericResultOne>;
    fetchAll(params: SelectAll): Promise<GenericResult>;
    insert(params: Insert): Promise<GenericResultOne | GenericResult>;
    update(params: Update): Promise<GenericResult>;
    delete(params: Delete): Promise<GenericResult>;
    _parse_arguments(row: Record<string, string | boolean | number | null | Raw>): Array<any>;
    _onConflict(resolution?: string | ConflictTypes): string;
    _insert(params: Insert): string;
    _update(params: Update): string;
    _delete(params: Delete): string;
    _select(params: SelectAll): string;
    _fields(value: string | Array<string>): string;
    _where(value?: string | Array<string>): string;
    _join(value?: Join | Array<Join>): string;
    _groupBy(value?: string | Array<string>): string;
    _having(value?: string): string;
    _orderBy(value?: string | Array<string> | Record<string, string | OrderTypes>): string;
    _limit(value?: number): string;
    _offset(value?: number): string;
    _returning(value?: string | Array<string>): string;
}

var e,t,r,s;!function(e){e.ASC="ASC",e.DESC="DESC"}(e||(e={})),function(e){e.ONE="ONE",e.ALL="ALL"}(t||(t={})),function(e){e.ROLLBACK="ROLLBACK",e.ABORT="ABORT",e.FAIL="FAIL",e.IGNORE="IGNORE",e.REPLACE="REPLACE"}(r||(r={})),function(e){e.INNER="INNER",e.LEFT="LEFT",e.CROSS="CROSS"}(s||(s={}));class n{isRaw=!0;content;constructor(e){this.content=e}}class a{_debugger=!1;setDebugger(e){this._debugger=e}async execute(e){throw new Error("Execute method not implemented")}async createTable(e){return this.execute({query:`CREATE TABLE ${e.ifNotExists?"IF NOT EXISTS":""} ${e.tableName}\n              (\n                ${e.schema}\n              )`})}async dropTable(e){return this.execute({query:`DROP TABLE ${e.ifExists?"IF EXISTS":""} ${e.tableName}`})}async fetchOne(e){const r=await this.execute({query:this._select({...e,limit:1}),arguments:e.where?e.where.params:void 0,fetchType:t.ALL});return{...r,results:r.results.length>0?r.results[0]:null}}async fetchAll(e){return this.execute({query:this._select(e),arguments:e.where?e.where.params:void 0,fetchType:t.ALL})}async insert(e){let r=[];if(Array.isArray(e.data))for(const t of e.data)r=r.concat(this._parse_arguments(t));else r=r.concat(this._parse_arguments(e.data));const s=Array.isArray(e.data)?t.ALL:t.ONE;return this.execute({query:this._insert(e),arguments:r,fetchType:s})}async update(e){let r=this._parse_arguments(e.data);return e.where&&e.where.params&&(r=e.where.params.concat(r)),this.execute({query:this._update(e),arguments:r,fetchType:t.ALL})}async delete(e){return this.execute({query:this._delete(e),arguments:e.where?e.where.params:void 0,fetchType:t.ALL})}_parse_arguments(e){return Object.values(e).filter((e=>!(e instanceof n)))}_onConflict(e){return e?`OR ${e} `:""}_insert(e){const t=[];Array.isArray(e.data)||(e.data=[e.data]);const r=Object.keys(e.data[0]).join(", ");let s=1;for(const r of e.data){const e=[];Object.values(r).forEach((t=>{t instanceof n?e.push(t.content):(e.push(`?${s}`),s+=1)})),t.push(`(${e.join(", ")})`)}return`INSERT ${this._onConflict(e.onConflict)}INTO ${e.tableName} (${r}) VALUES ${t.join(", ")}`+this._returning(e.returning)}_update(e){const t=e.where&&e.where.params?Object.keys(e.where.params).length:0,r=[];let s=1;for(const[a,i]of Object.entries(e.data))i instanceof n?r.push(`${a} = ${i.content}`):(r.push(`${a} = ?${t+s}`),s+=1);return`UPDATE ${this._onConflict(e.onConflict)}${e.tableName} SET ${r.join(", ")}`+this._where(e.where?.conditions)+this._returning(e.returning)}_delete(e){return`DELETE FROM ${e.tableName}`+this._where(e.where?.conditions)+this._returning(e.returning)}_select(e){return`SELECT ${this._fields(e.fields)} FROM ${e.tableName}`+this._join(e.join)+this._where(e.where?.conditions)+this._groupBy(e.groupBy)+this._having(e.having)+this._orderBy(e.orderBy)+this._limit(e.limit)+this._offset(e.offset)}_fields(e){return"string"==typeof e?e:e.join(", ")}_where(e){return e?"string"==typeof e?` WHERE ${e}`:` WHERE ${e.join(" AND ")}`:""}_join(e){if(!e)return"";Array.isArray(e)||(e=[e]);const t=[];return e.forEach((e=>{const r=e.type?`${e.type} `:"";t.push(`${r}JOIN ${"string"==typeof e.table?e.table:`(${this._select(e.table)})`}${e.alias?` AS ${e.alias}`:""} ON ${e.on}`)}))," "+t.join(" ")}_groupBy(e){return e?"string"==typeof e?` GROUP BY ${e}`:` GROUP BY ${e.join(", ")}`:""}_having(e){return e?` HAVING ${e}`:""}_orderBy(e){if(!e)return"";if("string"==typeof e)return` ORDER BY ${e}`;if(Array.isArray(e))return` ORDER BY ${e.join(", ")}`;const t=[];return Object.entries(e).forEach((([e,r])=>{t.push(`${e} ${r}`)})),` ORDER BY ${t.join(", ")}`}_limit(e){return e?` LIMIT ${e}`:""}_offset(e){return e?` OFFSET ${e}`:""}_returning(e){return e?"string"==typeof e?` RETURNING ${e}`:` RETURNING ${e.join(", ")}`:""}}class i extends a{db;constructor(e){super(),this.db=e}async execute(e){let r=this.db.prepare(e.query);if(this._debugger&&console.log({"workers-qb":e}),e.arguments&&(r=r.bind(...e.arguments)),e.fetchType===t.ONE||e.fetchType===t.ALL){const s=await r.all();return{changes:s.meta?.changes,duration:s.meta?.duration,last_row_id:s.meta?.last_row_id,served_by:s.meta?.served_by,success:s.success,results:e.fetchType===t.ONE&&s.results.length>0?s.results[0]:s.results}}return r.run()}}class o extends a{client;constructor(e){super(),this.client=e}async connect(){await this.client.connect()}async close(){await this.client.end()}async execute(e){const r=e.query.replaceAll("?","$");let s;return this._debugger&&console.log({"workers-qb":e}),s=e.arguments?await this.client.query({values:e.arguments,text:r}):await this.client.query({text:r}),e.fetchType===t.ONE||e.fetchType===t.ALL?{command:s.command,lastRowId:s.oid,rowCount:s.rowCount,results:e.fetchType===t.ONE&&s.rows.length>0?s.rows[0]:s.rows}:null}}export{r as ConflictTypes,i as D1QB,t as FetchTypes,s as JoinTypes,e as OrderTypes,o as PGQB,a as QueryBuilder,n as Raw};
